Index: meeting-server/src/main/java/com/fan/server/controller/EnterpriseController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.controller;\r\n\r\n\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.Enterprise;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.IEnterpriseService;\r\nimport com.fan.server.service.IStudentService;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * <p>\r\n *  前端控制器\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@RestController\r\n@RequestMapping(\"/enterprise\")\r\npublic class EnterpriseController {\r\n\r\n    @Autowired\r\n    private IEnterpriseService enterpriseService;\r\n\r\n    @PostMapping(\"/register\")\r\n    @ApiOperation(\"企业注册接口\")\r\n    public Result<?> register(@RequestBody User user) {\r\n        try {\r\n            enterpriseService.register(user);\r\n            return Result.success(\"注册成功\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Result.fail(202);\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    @ApiOperation(\"企业登录接口\")\r\n    public Result<Map<String, Object>> login(@RequestBody User user) {\r\n        Map<String, Object> data = enterpriseService.login(user);\r\n        if (!Objects.isNull(data)) {\r\n            return Result.success(data);\r\n        }\r\n        return Result.fail(202, \"用户名或密码错误\");\r\n    }\r\n\r\n    @GetMapping(\"/info\")\r\n    @ApiOperation(\"企业获取信息接口\")\r\n    public Result<Map<String, Object>> getInfo(@RequestParam String token) {\r\n        Map<String, Object> data = enterpriseService.getInfo(token);\r\n        if (!Objects.isNull(data)) {\r\n            return Result.success(data);\r\n        }\r\n        return Result.fail(203, \"企业不存在\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/controller/EnterpriseController.java b/meeting-server/src/main/java/com/fan/server/controller/EnterpriseController.java
--- a/meeting-server/src/main/java/com/fan/server/controller/EnterpriseController.java	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/src/main/java/com/fan/server/controller/EnterpriseController.java	(date 1688719779077)
@@ -61,4 +61,17 @@
         return Result.fail(203, "企业不存在");
     }
 
+    @PutMapping("/updateInformation")
+    @ApiOperation("完善企业信息")
+    public Result<Boolean>updateInformation(@RequestBody Enterprise enterprise){
+        try {
+            Boolean isMatchPassword = enterpriseService.updateInformation(enterprise);
+            if (isMatchPassword) return Result.success(true, "修改成功");
+            else return Result.success(false, "密码已修改，请重新登录");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return Result.fail(202);
+    }
+
 }
Index: meeting-server/src/main/java/com/fan/server/controller/TeacherController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.controller;\r\n\r\n\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.Teacher;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.IStudentService;\r\nimport com.fan.server.service.ITeacherService;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * <p>\r\n *  前端控制器\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@RestController\r\n@RequestMapping(\"/teacher\")\r\npublic class TeacherController {\r\n\r\n    @Autowired\r\n    private ITeacherService teacherService;\r\n\r\n    @PostMapping(\"/register\")\r\n    @ApiOperation(\"教师注册接口\")\r\n    public Result<?> register(@RequestBody User user) {\r\n        try {\r\n            teacherService.register(user);\r\n            return Result.success(\"注册成功\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Result.fail(202);\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    @ApiOperation(\"教师登录接口\")\r\n    public Result<Map<String, Object>> login(@RequestBody User user) {\r\n        Map<String, Object> data = teacherService.login(user);\r\n        if (!Objects.isNull(data)) {\r\n            return Result.success(data);\r\n        }\r\n        return Result.fail(202, \"用户名或密码错误\");\r\n    }\r\n\r\n    @GetMapping(\"/info\")\r\n    @ApiOperation(\"教师获取信息接口\")\r\n    public Result<Map<String, Object>> getInfo(@RequestParam String token) {\r\n        Map<String, Object> data = teacherService.getInfo(token);\r\n        if (!Objects.isNull(data)) {\r\n            return Result.success(data);\r\n        }\r\n        return Result.fail(203, \"教师不存在\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/controller/TeacherController.java b/meeting-server/src/main/java/com/fan/server/controller/TeacherController.java
--- a/meeting-server/src/main/java/com/fan/server/controller/TeacherController.java	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/src/main/java/com/fan/server/controller/TeacherController.java	(date 1688719815215)
@@ -61,4 +61,17 @@
         return Result.fail(203, "教师不存在");
     }
 
+    @PutMapping("/updateInformation")
+    @ApiOperation("完善教师信息")
+    public Result<Boolean>updateInformation(@RequestBody Teacher teacher){
+        try {
+            Boolean isMatchPassword = teacherService.updateInformation(teacher);
+            if (isMatchPassword) return Result.success(true, "修改成功");
+            else return Result.success(false, "密码已修改，请重新登录");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return Result.fail(202);
+    }
+
 }
Index: meeting-server/src/main/java/com/fan/server/service/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/UserServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/UserServiceImpl.java
new file mode 100644
--- /dev/null	(date 1688718159083)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/UserServiceImpl.java	(date 1688718159083)
@@ -0,0 +1,35 @@
+package com.fan.server.service.impl;
+
+import com.fan.server.service.IUserService;
+import com.fan.server.utils.JwtUtil;
+import io.jsonwebtoken.Claims;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author KeFan
+ * @date 2023/7/7
+ * @time 14:44
+ */
+
+@Service
+public class UserServiceImpl implements IUserService {
+
+    @Autowired
+    private JwtUtil jwtUtil;
+
+    @Override
+    public Map<String, String> getRoleId(String token) {
+        // 解析 token
+        Claims claims = jwtUtil.parseToken(token);
+        String id = claims.getId();
+        // 截取 roleId，为 id 的最后一位
+        String roleId = id.substring(id.length() - 1);
+        Map<String, String> data = new HashMap<>();
+        data.put("roleId", roleId);
+        return data;
+    }
+}
\ No newline at end of file
Index: meeting-server/src/main/java/com/fan/server/service/impl/TeacherServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.Teacher;\r\nimport com.fan.server.mapper.TeacherMapper;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.ITeacherService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.fan.server.utils.JwtUtil;\r\nimport io.jsonwebtoken.Claims;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class TeacherServiceImpl extends ServiceImpl<TeacherMapper, Teacher> implements ITeacherService {\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    @Autowired\r\n    private JwtUtil jwtUtil;\r\n\r\n    @Override\r\n    public void register(User user) throws Exception {\r\n        // 判断 student 表是否存在 mobilePhone\r\n        LambdaQueryWrapper<Teacher> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Teacher::getMobilephone, user.getUsername());\r\n        Teacher teacher = this.getOne(wrapper);\r\n        if (!Objects.isNull(teacher)) {\r\n            // 非空\r\n            throw new Exception(\"手机号存在，注册失败，请重新注册\");\r\n        }\r\n        // 空直接添加\r\n        Teacher res = new Teacher();\r\n        res.setMobilephone(user.getUsername());\r\n        res.setPassword(user.getPassword());\r\n        this.save(res);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> login(User user) {\r\n        // 查询教师是否存在\r\n        LambdaQueryWrapper<Teacher> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Teacher::getMobilephone, user.getUsername());\r\n        // 根据登录用户传入的用户名，查询数据库里的用户\r\n        Teacher dbUser = this.getOne(wrapper);\r\n        // 判断是否非空\r\n        if (!Objects.isNull(dbUser) && passwordEncoder.matches(user.getPassword(), dbUser.getPassword())) {\r\n            // 设置 Jwt 中的密码为明文密码，因为要在个人信息中修改，必须要存密码\r\n            dbUser.setPassword(user.getPassword());\r\n            // 生成 Jwt\r\n            String token = null;\r\n            try {\r\n                token = jwtUtil.createToken(dbUser, \"2\");\r\n                // 返回数据\r\n                HashMap<String, Object> data = new HashMap<>();\r\n                data.put(\"token\", token);\r\n                return data;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getInfo(String token) {\r\n        Teacher teacher = jwtUtil.parseToken(token, Teacher.class);\r\n        if (!Objects.isNull(teacher)) {\r\n            HashMap<String, Object> data = new HashMap<>();\r\n            // 根据 mobilePhone 查询教师表\r\n            LambdaQueryWrapper<Teacher> wrapper = new LambdaQueryWrapper<>();\r\n            wrapper.eq(Teacher::getMobilephone, teacher.getMobilephone());\r\n            // 从数据库里查询学生，不从 token 里直接拿，因为在登录之后\r\n            // 学生信息有可能被修改\r\n            Teacher modifyTeacher = this.getOne(wrapper);\r\n            data.put(\"teacherName\", modifyTeacher.getTeacherName());\r\n            data.put(\"mobilephone\", modifyTeacher.getMobilephone());\r\n            data.put(\"password\", modifyTeacher.getPassword());\r\n            data.put(\"college\", modifyTeacher.getCollege());\r\n            data.put(\"avatar\", modifyTeacher.getAvatar());\r\n\r\n            return data;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/TeacherServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/TeacherServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/TeacherServiceImpl.java	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/TeacherServiceImpl.java	(date 1688719685519)
@@ -13,6 +13,7 @@
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
 
+import java.time.LocalDate;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -47,7 +48,7 @@
         // 空直接添加
         Teacher res = new Teacher();
         res.setMobilephone(user.getUsername());
-        res.setPassword(user.getPassword());
+        res.setPassword(passwordEncoder.encode(user.getPassword()));
         this.save(res);
     }
 
@@ -100,4 +101,22 @@
         return null;
     }
 
+    @Override
+    public Boolean updateInformation(Teacher teacher) throws Exception{
+        // 根据 studentId 查询用户
+        LambdaQueryWrapper<Teacher> wrapper = new LambdaQueryWrapper<>();
+        wrapper.eq(Teacher::getMobilephone, teacher.getMobilephone());
+        Teacher dbTeacher = this.getOne(wrapper);
+        if(Objects.isNull(dbTeacher))
+            throw new Exception("用户不存在");
+        // 判断密码是否修改   true：密码匹配，未修改，    false：密码不匹配，修改了密码
+        boolean isMatchPassword = passwordEncoder.matches(teacher.getPassword(), dbTeacher.getPassword());
+        // 修改用户时，要把密码加密存到数据库
+        teacher.setPassword(passwordEncoder.encode(teacher.getPassword()));
+        // 修改
+        this.update(teacher, wrapper);
+        // 返回
+        return isMatchPassword;
+    }
+
 }
Index: meeting-server/src/main/java/com/fan/server/service/IUserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IUserService.java b/meeting-server/src/main/java/com/fan/server/service/IUserService.java
new file mode 100644
--- /dev/null	(date 1688718126220)
+++ b/meeting-server/src/main/java/com/fan/server/service/IUserService.java	(date 1688718126220)
@@ -0,0 +1,14 @@
+package com.fan.server.service;
+
+import java.util.Map;
+
+/**
+ * @author KeFan
+ * @date 2023/7/7
+ * @time 14:44
+ */
+
+public interface IUserService {
+
+    Map<String, String> getRoleId(String token);
+}
\ No newline at end of file
Index: meeting-server/src/main/java/com/fan/server/service/IEnterpriseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.Enterprise;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.User;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface IEnterpriseService extends IService<Enterprise> {\r\n\r\n    void register(User user) throws Exception;\r\n\r\n    Map<String, Object> login(User user);\r\n\r\n    Map<String, Object> getInfo(String token);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IEnterpriseService.java b/meeting-server/src/main/java/com/fan/server/service/IEnterpriseService.java
--- a/meeting-server/src/main/java/com/fan/server/service/IEnterpriseService.java	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/src/main/java/com/fan/server/service/IEnterpriseService.java	(date 1688719603792)
@@ -2,7 +2,6 @@
 
 import com.fan.server.pojo.Enterprise;
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.fan.server.pojo.Student;
 import com.fan.server.pojo.User;
 
 import java.util.Map;
@@ -22,4 +21,6 @@
     Map<String, Object> login(User user);
 
     Map<String, Object> getInfo(String token);
+
+    Boolean updateInformation(Enterprise enterprise) throws Exception;
 }
Index: meeting-server/target/classes/mapper/EnterpriseMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.fan.server.mapper.EnterpriseMapper\">\r\n\r\n    <!-- 通用查询映射结果 -->\r\n    <resultMap id=\"BaseResultMap\" type=\"com.fan.server.pojo.Enterprise\">\r\n        <id column=\"id\" property=\"id\" />\r\n        <result column=\"enterprise_name\" property=\"enterpriseName\" />\r\n        <result column=\"password\" property=\"password\" />\r\n        <result column=\"mobilephone\" property=\"mobilephone\" />\r\n        <result column=\"email\" property=\"email\" />\r\n    </resultMap>\r\n\r\n    <!-- 通用查询结果列 -->\r\n    <sql id=\"Base_Column_List\">\r\n        <if test=\"true\">\r\n            id, enterprise_name, password, mobilephone, email\r\n        </if>\r\n    </sql>\r\n\r\n</mapper>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/target/classes/mapper/EnterpriseMapper.xml b/meeting-server/target/classes/mapper/EnterpriseMapper.xml
--- a/meeting-server/target/classes/mapper/EnterpriseMapper.xml	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/target/classes/mapper/EnterpriseMapper.xml	(date 1688716953870)
@@ -9,6 +9,7 @@
         <result column="password" property="password" />
         <result column="mobilephone" property="mobilephone" />
         <result column="email" property="email" />
+        <result column="avatar" property="avatar"/>
     </resultMap>
 
     <!-- 通用查询结果列 -->
Index: meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.mapper.StudentMapper;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.IStudentService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.fan.server.utils.JwtUtil;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.Objects;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class StudentServiceImpl extends ServiceImpl<StudentMapper, Student> implements IStudentService {\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    @Autowired\r\n    private JwtUtil jwtUtil;\r\n\r\n    @Override\r\n    public void register(User user) throws Exception {\r\n        // 判断 student 表是否存在 mobilePhone\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, user.getUsername());\r\n        Student student = this.getOne(wrapper);\r\n        if (!Objects.isNull(student)) {\r\n            // 非空\r\n            throw new Exception(\"手机号存在，注册失败，请重新注册\");\r\n        }\r\n        // 空直接添加\r\n        Student res = new Student();\r\n        res.setMobilephone(user.getUsername());\r\n        res.setPassword(user.getPassword());\r\n        this.save(res);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> login(User user) {\r\n        // 查询学生是否存在\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, user.getUsername());\r\n        // 根据登录用户传入的用户名，查询数据库里的用户\r\n        Student dbUser = this.getOne(wrapper);\r\n        // 判断是否非空\r\n        if (!Objects.isNull(dbUser) && passwordEncoder.matches(user.getPassword(), dbUser.getPassword())) {\r\n            // 设置 Jwt 中的密码为明文密码，因为要在个人信息中修改，必须要存密码\r\n            dbUser.setPassword(user.getPassword());\r\n            // 生成 Jwt\r\n            String token = null;\r\n            try {\r\n                token = jwtUtil.createToken(dbUser, \"1\");\r\n                // 返回数据\r\n                HashMap<String, Object> data = new HashMap<>();\r\n                data.put(\"token\", token);\r\n                return data;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getInfo(String token) {\r\n        Student student = jwtUtil.parseToken(token, Student.class);\r\n        if (!Objects.isNull(student)) {\r\n            HashMap<String, Object> data = new HashMap<>();\r\n            // 根据 studentId 查询学生表\r\n            LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n            wrapper.eq(Student::getMobilephone, student.getMobilephone());\r\n            // 从数据库里查询学生，不从 token 里直接拿，因为在登录之后\r\n            // 学生信息有可能被修改\r\n            Student modifyStudent = this.getOne(wrapper);\r\n            data.put(\"studentId\", modifyStudent.getStudentId());\r\n            data.put(\"studentName\", modifyStudent.getStudentName());\r\n            data.put(\"mobilephone\", modifyStudent.getMobilephone());\r\n            data.put(\"password\", student.getPassword());\r\n            data.put(\"gender\", modifyStudent.getGender());\r\n            if (modifyStudent.getBirthday() != null) {\r\n                data.put(\"birthday\", modifyStudent.getBirthday().toString());\r\n            } else {\r\n                data.put(\"birthday\", null);\r\n            }\r\n            data.put(\"college\", modifyStudent.getCollege());\r\n            data.put(\"major\", modifyStudent.getMajor());\r\n            data.put(\"majorClass\", modifyStudent.getMajorClass());\r\n            data.put(\"avatar\", modifyStudent.getAvatar());\r\n\r\n            return data;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Boolean updateInformation(Student student) {\r\n        // 根据 studentId 查询用户\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, student.getMobilephone());\r\n        Student dbStudent = this.getOne(wrapper);\r\n        // 判断密码是否修改   true：密码匹配，未修改，    false：密码不匹配，修改了密码\r\n        boolean isMatchPassword = passwordEncoder.matches(student.getPassword(), dbStudent.getPassword());\r\n        // 修改用户时，要把密码加密存到数据库\r\n        student.setPassword(passwordEncoder.encode(student.getPassword()));\r\n        // 要把生日 + 1 天，才能正确对应\r\n        LocalDate birthday = student.getBirthday();\r\n        LocalDate correctBirthday = birthday.plusDays(1);\r\n        student.setBirthday(correctBirthday);\r\n        // 修改\r\n        this.update(student, wrapper);\r\n        // 返回\r\n        return isMatchPassword;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java	(date 1688719102172)
@@ -47,7 +47,7 @@
         // 空直接添加
         Student res = new Student();
         res.setMobilephone(user.getUsername());
-        res.setPassword(user.getPassword());
+        res.setPassword(passwordEncoder.encode(user.getPassword()));
         this.save(res);
     }
 
@@ -110,11 +110,13 @@
     }
 
     @Override
-    public Boolean updateInformation(Student student) {
+    public Boolean updateInformation(Student student) throws Exception{
         // 根据 studentId 查询用户
         LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();
         wrapper.eq(Student::getMobilephone, student.getMobilephone());
         Student dbStudent = this.getOne(wrapper);
+        if(Objects.isNull(dbStudent))
+            throw new Exception("用户不存在");
         // 判断密码是否修改   true：密码匹配，未修改，    false：密码不匹配，修改了密码
         boolean isMatchPassword = passwordEncoder.matches(student.getPassword(), dbStudent.getPassword());
         // 修改用户时，要把密码加密存到数据库
Index: meeting-server/src/main/java/com/fan/server/service/impl/EnterpriseServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.fan.server.pojo.Enterprise;\r\nimport com.fan.server.mapper.EnterpriseMapper;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.IEnterpriseService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.fan.server.utils.JwtUtil;\r\nimport io.jsonwebtoken.Claims;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class EnterpriseServiceImpl extends ServiceImpl<EnterpriseMapper, Enterprise> implements IEnterpriseService {\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    @Autowired\r\n    private JwtUtil jwtUtil;\r\n\r\n    @Override\r\n    public void register(User user) throws Exception {\r\n        // 判断 student 表是否存在 mobilePhone\r\n        LambdaQueryWrapper<Enterprise> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Enterprise::getMobilephone, user.getUsername());\r\n        Enterprise enterprise = this.getOne(wrapper);\r\n        if (!Objects.isNull(enterprise)) {\r\n            // 非空\r\n            throw new Exception(\"手机号存在，注册失败，请重新注册\");\r\n        }\r\n        // 空直接添加\r\n        Enterprise res = new Enterprise();\r\n        res.setMobilephone(user.getUsername());\r\n        res.setPassword(user.getPassword());\r\n        this.save(res);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> login(User user) {\r\n        // 查询学生是否存在\r\n        LambdaQueryWrapper<Enterprise> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Enterprise::getMobilephone, user.getUsername());\r\n        // 根据登录用户传入的用户名，查询数据库里的用户\r\n        Enterprise dbUser = this.getOne(wrapper);\r\n        // 判断是否非空\r\n        if (!Objects.isNull(dbUser) && passwordEncoder.matches(user.getPassword(), dbUser.getPassword())) {\r\n            // 设置 Jwt 中的密码为明文密码，因为要在个人信息中修改，必须要存密码\r\n            dbUser.setPassword(user.getPassword());\r\n            // 生成 Jwt\r\n            String token = null;\r\n            try {\r\n                token = jwtUtil.createToken(dbUser, \"3\");\r\n                // 返回数据\r\n                HashMap<String, Object> data = new HashMap<>();\r\n                data.put(\"token\", token);\r\n                return data;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getInfo(String token) {\r\n        Enterprise enterprise = jwtUtil.parseToken(token, Enterprise.class);\r\n        if (!Objects.isNull(enterprise)) {\r\n            HashMap<String, Object> data = new HashMap<>();\r\n            // 根据 mobilePhone 查询企业表\r\n            LambdaQueryWrapper<Enterprise> wrapper = new LambdaQueryWrapper<>();\r\n            wrapper.eq(Enterprise::getMobilephone, enterprise.getMobilephone());\r\n            // 从数据库里查询学生，不从 token 里直接拿，因为在登录之后\r\n            // 学生信息有可能被修改\r\n            Enterprise modifyEnterprise = this.getOne(wrapper);\r\n            data.put(\"enterpriseName\", modifyEnterprise.getEnterpriseName());\r\n            data.put(\"password\", modifyEnterprise.getPassword());\r\n            data.put(\"mobilephone\", modifyEnterprise.getMobilephone());\r\n            data.put(\"email\", modifyEnterprise.getEmail());\r\n            data.put(\"avatar\", modifyEnterprise.getAvatar());\r\n\r\n            return data;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/EnterpriseServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/EnterpriseServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/EnterpriseServiceImpl.java	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/EnterpriseServiceImpl.java	(date 1688719759836)
@@ -4,6 +4,7 @@
 import com.fan.server.pojo.Enterprise;
 import com.fan.server.mapper.EnterpriseMapper;
 import com.fan.server.pojo.Student;
+import com.fan.server.pojo.Teacher;
 import com.fan.server.pojo.User;
 import com.fan.server.service.IEnterpriseService;
 import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
@@ -13,6 +14,7 @@
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
 
+import java.time.LocalDate;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -47,7 +49,7 @@
         // 空直接添加
         Enterprise res = new Enterprise();
         res.setMobilephone(user.getUsername());
-        res.setPassword(user.getPassword());
+        res.setPassword(passwordEncoder.encode(user.getPassword()));
         this.save(res);
     }
 
@@ -100,4 +102,22 @@
         return null;
     }
 
+    @Override
+    public Boolean updateInformation(Enterprise enterprise) throws Exception{
+        // 根据 studentId 查询用户
+        LambdaQueryWrapper<Enterprise> wrapper = new LambdaQueryWrapper<>();
+        wrapper.eq(Enterprise::getMobilephone, enterprise.getMobilephone());
+        Enterprise dbEnterprise = this.getOne(wrapper);
+        if(Objects.isNull(dbEnterprise))
+            throw new Exception("用户不存在");
+        // 判断密码是否修改   true：密码匹配，未修改，    false：密码不匹配，修改了密码
+        boolean isMatchPassword = passwordEncoder.matches(enterprise.getPassword(), dbEnterprise.getPassword());
+        // 修改用户时，要把密码加密存到数据库
+        enterprise.setPassword(passwordEncoder.encode(enterprise.getPassword()));
+        // 修改
+        this.update(enterprise, wrapper);
+        // 返回
+        return isMatchPassword;
+    }
+
 }
Index: meeting-server/src/main/java/com/fan/server/service/ITeacherService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.Teacher;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\nimport com.fan.server.pojo.User;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface ITeacherService extends IService<Teacher> {\r\n\r\n    void register(User user) throws Exception;\r\n\r\n    Map<String, Object> login(User user);\r\n\r\n    Map<String, Object> getInfo(String token);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/ITeacherService.java b/meeting-server/src/main/java/com/fan/server/service/ITeacherService.java
--- a/meeting-server/src/main/java/com/fan/server/service/ITeacherService.java	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/src/main/java/com/fan/server/service/ITeacherService.java	(date 1688719619799)
@@ -22,4 +22,6 @@
     Map<String, Object> login(User user);
 
     Map<String, Object> getInfo(String token);
+
+    Boolean updateInformation(Teacher teacher) throws Exception;
 }
Index: meeting-server/target/classes/mapper/TeacherMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.fan.server.mapper.TeacherMapper\">\r\n\r\n    <!-- 通用查询映射结果 -->\r\n    <resultMap id=\"BaseResultMap\" type=\"com.fan.server.pojo.Teacher\">\r\n        <id column=\"id\" property=\"id\" />\r\n        <result column=\"mobilephone\" property=\"mobilephone\" />\r\n        <result column=\"password\" property=\"password\" />\r\n        <result column=\"college\" property=\"college\" />\r\n        <result column=\"teacher_name\" property=\"teacherName\" />\r\n    </resultMap>\r\n\r\n    <!-- 通用查询结果列 -->\r\n    <sql id=\"Base_Column_List\">\r\n        <if test=\"true\">\r\n            id, mobilephone, password, college, teacher_name\r\n        </if>\r\n    </sql>\r\n\r\n</mapper>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/target/classes/mapper/TeacherMapper.xml b/meeting-server/target/classes/mapper/TeacherMapper.xml
--- a/meeting-server/target/classes/mapper/TeacherMapper.xml	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/target/classes/mapper/TeacherMapper.xml	(date 1688716953876)
@@ -9,6 +9,7 @@
         <result column="password" property="password" />
         <result column="college" property="college" />
         <result column="teacher_name" property="teacherName" />
+        <result column="avatar" property="avatar"/>
     </resultMap>
 
     <!-- 通用查询结果列 -->
Index: meeting-server/target/classes/mapper/StudentMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.fan.server.mapper.StudentMapper\">\r\n\r\n    <!-- 通用查询映射结果 -->\r\n    <resultMap id=\"BaseResultMap\" type=\"com.fan.server.pojo.Student\">\r\n        <id column=\"id\" property=\"id\" />\r\n        <result column=\"student_id\" property=\"studentId\" />\r\n        <result column=\"student_name\" property=\"studentName\" />\r\n        <result column=\"mobilephone\" property=\"mobilephone\" />\r\n        <result column=\"password\" property=\"password\" />\r\n        <result column=\"gender\" property=\"gender\" />\r\n        <result column=\"birthday\" property=\"birthday\" />\r\n        <result column=\"college\" property=\"college\" />\r\n        <result column=\"major\" property=\"major\" />\r\n        <result column=\"major_class\" property=\"majorClass\" />\r\n        <result column=\"avatar\" property=\"avatar\" />\r\n        <result column=\"role_id\" property=\"roleId\" />\r\n    </resultMap>\r\n\r\n    <!-- 通用查询结果列 -->\r\n    <sql id=\"Base_Column_List\">\r\n        <if test=\"true\">\r\n            id, student_id, student_name, mobilephone, password, gender, birthday, college, major, major_class, avatar, role_id\r\n        </if>\r\n    </sql>\r\n\r\n</mapper>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/target/classes/mapper/StudentMapper.xml b/meeting-server/target/classes/mapper/StudentMapper.xml
--- a/meeting-server/target/classes/mapper/StudentMapper.xml	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/target/classes/mapper/StudentMapper.xml	(date 1688716953873)
@@ -15,7 +15,6 @@
         <result column="major" property="major" />
         <result column="major_class" property="majorClass" />
         <result column="avatar" property="avatar" />
-        <result column="role_id" property="roleId" />
     </resultMap>
 
     <!-- 通用查询结果列 -->
Index: meeting-server/src/main/java/com/fan/server/service/IStudentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.Student;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\nimport com.fan.server.pojo.User;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface IStudentService extends IService<Student> {\r\n\r\n    void register(User user) throws Exception;\r\n\r\n    Map<String, Object> login(User user);\r\n\r\n    Map<String, Object> getInfo(String token);\r\n\r\n    Boolean updateInformation(Student student);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IStudentService.java b/meeting-server/src/main/java/com/fan/server/service/IStudentService.java
--- a/meeting-server/src/main/java/com/fan/server/service/IStudentService.java	(revision 74148d823769f509eeb65e912459d0da84250804)
+++ b/meeting-server/src/main/java/com/fan/server/service/IStudentService.java	(date 1688718932738)
@@ -22,5 +22,5 @@
 
     Map<String, Object> getInfo(String token);
 
-    Boolean updateInformation(Student student);
+    Boolean updateInformation(Student student) throws Exception;
 }
