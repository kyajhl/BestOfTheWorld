Index: meeting-server/src/main/java/com/fan/server/service/impl/TeamServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.fan.server.pojo.Project;\r\nimport com.fan.server.pojo.Team;\r\nimport com.fan.server.mapper.TeamMapper;\r\nimport com.fan.server.service.IProjectService;\r\nimport com.fan.server.service.ITeamService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.UUID;\r\n\r\n/**\r\n * <p>\r\n * 服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class TeamServiceImpl extends ServiceImpl<TeamMapper, Team> implements ITeamService {\r\n\r\n    @Autowired\r\n    private IProjectService projectService;\r\n\r\n    @Override\r\n    public void addTeam(String teamName, Integer projectId) throws Exception {\r\n        try {\r\n            Project project = projectService.getProjectById(projectId);\r\n            if (Objects.isNull(project))\r\n                throw new Exception(\"团队不存在\");\r\n            Team team = new Team();\r\n            team.setTeamId(UUID.randomUUID().toString());\r\n            team.setTeamName(teamName);\r\n            team.setProjectId(projectId);\r\n            team.setTeamNumber(0);\r\n            this.save(team);\r\n        } catch (Exception e) {\r\n            throw new Exception(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void deleteTeam(String teamId) throws Exception {\r\n        LambdaQueryWrapper<Team> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Team::getTeamId, teamId);\r\n        Team team1 = this.getOne(wrapper);\r\n        if (Objects.isNull(team1)) {\r\n            //未找到项目\r\n            throw new Exception((\"团队不存在\"));\r\n        }\r\n        this.remove(wrapper);\r\n    }\r\n\r\n    @Override\r\n    public void updateTeam(Team team) throws Exception {\r\n        LambdaQueryWrapper<Team> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Team::getTeamId, team.getTeamId());\r\n        Team team1 = this.getOne(wrapper);\r\n        if (Objects.isNull(team1)) {\r\n            //未找到团队\r\n            throw new Exception((\"团队不存在\"));\r\n        }\r\n        this.update(team, wrapper);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getTeamList(Long pageNo, Long pageSize, String teamName) {\r\n        LambdaQueryWrapper<Team> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.like(Team::getTeamName, teamName);\r\n\r\n        IPage<Team> page = new Page<>(pageNo, pageSize);\r\n        this.page(page, wrapper);\r\n\r\n        //封装map\r\n        HashMap<String, Object> data = new HashMap<>();\r\n        data.put(\"total\", page.getTotal());\r\n        data.put(\"teamList\", page.getRecords());\r\n\r\n        return data;\r\n    }\r\n\r\n    @Override\r\n    public void TeamNumberPlusOne(String teamId) throws Exception{\r\n        LambdaQueryWrapper<Team> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Team::getTeamId, teamId);\r\n        Team team = this.getOne(wrapper);\r\n        if(Objects.isNull(team))\r\n            throw new Exception(\"团队不存在\");\r\n        team.setTeamNumber(team.getTeamNumber() + 1);\r\n        this.updateById(team);\r\n    }\r\n\r\n    @Override\r\n    public void TeamNumberSubOne(String teamId) throws Exception{\r\n        LambdaQueryWrapper<Team> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Team::getTeamId, teamId);\r\n        Team team = this.getOne(wrapper);\r\n        if(Objects.isNull(team))\r\n            throw new Exception(\"团队不存在\");\r\n        team.setTeamNumber(team.getTeamNumber() - 1);\r\n        this.updateById(team);\r\n    }\r\n\r\n    @Override\r\n    public Team getTeamByTeamId(String teamId) {\r\n        LambdaQueryWrapper<Team> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Team::getTeamId, teamId);\r\n        return this.getOne(wrapper);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/TeamServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/TeamServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/TeamServiceImpl.java	(revision 98f80f6fe1c9f0c87f3ed071fe0562e874ffd329)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/TeamServiceImpl.java	(date 1689212805001)
@@ -38,6 +38,13 @@
             Project project = projectService.getProjectById(projectId);
             if (Objects.isNull(project))
                 throw new Exception("团队不存在");
+            LambdaQueryWrapper<Team> wrapper = new LambdaQueryWrapper<>();
+            wrapper.eq(Team::getTeamName, teamName);
+            wrapper.eq(Team::getProjectId, projectId);
+            if(!Objects.isNull(this.getOne(wrapper))){
+                //非空，已存在
+                throw new Exception("团队名重复");
+            }
             Team team = new Team();
             team.setTeamId(UUID.randomUUID().toString());
             team.setTeamName(teamName);
Index: meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.controller;\r\n\r\n\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.StudentTeam;\r\nimport com.fan.server.service.IStudentTeamService;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  前端控制器\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@RestController\r\n@RequestMapping(\"/student-team\")\r\npublic class StudentTeamController {\r\n\r\n    @Autowired\r\n    IStudentTeamService studentTeamService;\r\n\r\n    @PostMapping(\"/addStudentTeam\")\r\n    @ApiOperation(\"为团队添加成员接口\")\r\n    public Result<?> addStudentTeam(@RequestParam String mobilephone,\r\n                                    @RequestParam String teamId,\r\n                                    @RequestParam String position) {\r\n        try{\r\n            studentTeamService.addStudentTeam(mobilephone, teamId, position);\r\n            return Result.success(\"添加成员成功\");\r\n        }catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @DeleteMapping(\"/deleteStudentTeam\")\r\n    @ApiOperation(\"从团队删除学生接口\")\r\n    public Result<?> deleteStudentTeam(@RequestParam String mobilephone,\r\n                                       @RequestParam String teamId) {\r\n        try{\r\n            studentTeamService.deleteStudentTeam(mobilephone, teamId);\r\n            return Result.success(\"删除成员成功\");\r\n        }catch (Exception e){\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/updateStudentTeam\")\r\n    @ApiOperation(\"更新学生在团队中的信息接口\")\r\n    public Result<?> updateStudentTeam(\r\n            @RequestParam String teamName,\r\n            @RequestParam Integer projectId,\r\n            @RequestParam String teamId,\r\n            @RequestParam List<String> selectedStudentList\r\n    ) {\r\n        try {\r\n            studentTeamService.updateStudentTeam(teamName, projectId, teamId, selectedStudentList);\r\n            return Result.success(\"修改成功\");\r\n        }catch (Exception e){\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/getStudentListByTeamId\")\r\n    @ApiOperation(\"通过团队id查询成员接口\")\r\n    public Result<Map<String, Object>> getStudentListByTeamId(\r\n            @RequestParam(\"pageNo\") Long pageNo,\r\n            @RequestParam(\"pageSize\") Long pageSize,\r\n            @RequestParam(required = false, value = \"teamId\") String teamId){\r\n        try{\r\n            Map<String, Object> data = studentTeamService.getStudentListByTeamId(pageNo, pageSize, teamId);\r\n            return Result.success(data, \"获取成员成功\");\r\n        }catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/getTeamInfById\")\r\n    @ApiOperation(\"获取团队所有信息接口\")\r\n    public Result<Map<String, Object>> getTeamInfById(@RequestParam String teamId) {\r\n        try{\r\n            Map<String, Object> data = studentTeamService.getTeamInfById(teamId);\r\n            /*\r\n            * teamName\r\n            * projectId\r\n            * studentList\r\n            * */\r\n            return Result.success(data);\r\n        }catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/deleteTeam\")\r\n    @ApiOperation(\"删除整个团队\")\r\n    public Result<?> deleteTeam(@RequestParam String teamId) {\r\n        try {\r\n            studentTeamService.deleteTeam(teamId);\r\n            return Result.success(\"删除成功\");\r\n        }catch (Exception e){\r\n            return Result.fail(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java b/meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java
--- a/meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java	(revision 98f80f6fe1c9f0c87f3ed071fe0562e874ffd329)
+++ b/meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java	(date 1689228069639)
@@ -52,7 +52,7 @@
         }
     }
 
-    @PutMapping("/updateStudentTeam")
+    @PostMapping("/updateStudentTeam")
     @ApiOperation("更新学生在团队中的信息接口")
     public Result<?> updateStudentTeam(
             @RequestParam String teamName,
@@ -90,6 +90,7 @@
             /*
             * teamName
             * projectId
+            * volume
             * studentList
             * */
             return Result.success(data);
Index: meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.fan.server.pojo.*;\r\nimport com.fan.server.mapper.StudentTeamMapper;\r\nimport com.fan.server.service.IStudentService;\r\nimport com.fan.server.service.IStudentTeamService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.fan.server.service.ITeamService;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport io.swagger.models.auth.In;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.*;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class StudentTeamServiceImpl extends ServiceImpl<StudentTeamMapper, StudentTeam> implements IStudentTeamService {\r\n\r\n    @Autowired\r\n    IStudentService studentService;\r\n\r\n    @Autowired\r\n    ITeamService teamService;\r\n\r\n    @Override\r\n    public void addStudentTeam(String mobilephone, String teamId, String position) throws Exception {\r\n        StudentTeam studentTeam = new StudentTeam();\r\n        Integer studentId;\r\n        try {\r\n            studentId = studentService.getStudentIdByMobilephone(mobilephone);\r\n        }catch (Exception e){\r\n            throw new Exception(\"学生不存在\");\r\n        }\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getStudentId, studentId);\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        if(!Objects.isNull(this.getOne(wrapper))){\r\n            //非空，查询到了\r\n            throw new Exception(\"该学生已经在该团队了\");\r\n        }\r\n        try{\r\n            teamService.TeamNumberPlusOne(teamId);\r\n        }catch (Exception e){\r\n            throw new Exception(\"团队不存在\");\r\n        }\r\n        studentTeam.setStudentId(studentId);\r\n        studentTeam.setPosition(position);\r\n        studentTeam.setTeamId(teamId);\r\n        studentTeam.setGrade(\"0\");\r\n        this.save(studentTeam);\r\n    }\r\n\r\n    @Override\r\n    public void deleteStudentTeam(String mobilephone, String teamId) throws Exception{\r\n        Integer studentId;\r\n        try {\r\n            studentId = studentService.getStudentIdByMobilephone(mobilephone);\r\n        }catch (Exception e){\r\n            throw new Exception(\"学生不存在\");\r\n        }\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getStudentId, studentId);\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        if(Objects.isNull(this.getOne(wrapper))){\r\n            //为空，代表该学生不在该团队\r\n            throw new Exception(\"学生不在该团队，无法删除\");\r\n        }\r\n        try{\r\n            teamService.TeamNumberSubOne(teamId);\r\n        }catch (Exception e){\r\n            throw new Exception(\"团队不存在\");\r\n        }\r\n        this.remove(wrapper);\r\n    }\r\n\r\n    @Override\r\n    public void deleteTeam(String teamId) throws Exception{\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        this.remove(wrapper);\r\n        teamService.deleteTeam(teamId);\r\n    }\r\n\r\n    @Override\r\n    public void deleteStudentTeam(StudentTeam studentTeam) {\r\n        removeById(studentTeam.getId());\r\n    }\r\n\r\n    @Override\r\n    public void updateStudentTeam(String teamName, Integer projectId, String teamId, List<String> selectedStudentList) throws Exception {\r\n        LambdaQueryWrapper<StudentTeam> studentTeamWrapper = new LambdaQueryWrapper<>();\r\n        studentTeamWrapper.eq(StudentTeam::getTeamId, teamId);\r\n        List<StudentTeam> preList = this.list(studentTeamWrapper);\r\n        preList.forEach(this::deleteStudentTeam);\r\n        Team team = new Team();\r\n        team.setTeamId(teamId);\r\n        team.setTeamNumber(0);\r\n        team.setTeamName(teamName);\r\n        team.setProjectId(projectId);\r\n        teamService.updateTeam(team);\r\n        selectedStudentList.forEach((value) -> {\r\n            String[] nowString = value.split(\"-\");\r\n            try {\r\n                addStudentTeam(nowString[0], teamId, nowString[1]);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getStudentListByTeamId(Long pageNo, Long pageSize, String teamId) {\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        wrapper.orderByAsc(StudentTeam::getStudentId);\r\n\r\n        IPage<StudentTeam> page = new Page<>(pageNo, pageSize);\r\n        this.page(page, wrapper);\r\n\r\n        //封装 map\r\n        HashMap<String, Object> data = new HashMap<>();\r\n        data.put(\"total\", page.getTotal());\r\n        data.put(\"StudentList\", page.getRecords());\r\n\r\n        return data;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getTeamInfById(String teamId) {\r\n        Team team = teamService.getTeamByTeamId(teamId);\r\n        Map<String, Object> data = new HashMap<>();\r\n        data.put(\"teamName\", team.getTeamName());\r\n        data.put(\"projectId\", team.getProjectId());\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        List<StudentTeam> list = this.list(wrapper);\r\n        List<StudentTeamInf> list1 = new ArrayList<>();\r\n        list.forEach((value) -> {\r\n            StudentTeamInf now = new StudentTeamInf();\r\n            now.setStudentTeamInf(value);\r\n            try {\r\n                now.setMobilephone(studentService.getStudentMobilephoneById(value.getStudentId()));\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            list1.add(now);\r\n        });\r\n        data.put(\"selectedStudentList\", list1);\r\n        return data;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java	(revision 98f80f6fe1c9f0c87f3ed071fe0562e874ffd329)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java	(date 1689228289602)
@@ -5,6 +5,7 @@
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.fan.server.pojo.*;
 import com.fan.server.mapper.StudentTeamMapper;
+import com.fan.server.service.IProjectService;
 import com.fan.server.service.IStudentService;
 import com.fan.server.service.IStudentTeamService;
 import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
@@ -33,6 +34,9 @@
     @Autowired
     ITeamService teamService;
 
+    @Autowired
+    IProjectService projectService;
+
     @Override
     public void addStudentTeam(String mobilephone, String teamId, String position) throws Exception {
         StudentTeam studentTeam = new StudentTeam();
@@ -142,6 +146,11 @@
         Map<String, Object> data = new HashMap<>();
         data.put("teamName", team.getTeamName());
         data.put("projectId", team.getProjectId());
+        try {
+            data.put("volume", projectService.getVolumeById(team.getProjectId()));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
         LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();
         wrapper.eq(StudentTeam::getTeamId, teamId);
         List<StudentTeam> list = this.list(wrapper);
Index: meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.Project;\r\nimport com.fan.server.mapper.ProjectMapper;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.IProjectService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.core.parameters.P;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nimport static ch.qos.logback.core.joran.action.ActionConst.NULL;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class ProjectServiceImpl extends ServiceImpl<ProjectMapper, Project> implements IProjectService {\r\n\r\n    @Override\r\n    public void addProject(Project project) throws Exception {\r\n        // 判断 student 表是否存在 mobilePhone\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, project.getProjectId());\r\n        Project project1 = this.getOne(wrapper);\r\n        if (!Objects.isNull(project1)) {\r\n            // 非空\r\n            throw new Exception(\"项目号已存在\");\r\n        }\r\n        // 空直接添加\r\n        project.setBeginDate(project.getBeginDate().plusDays(1));\r\n        project.setEndDate(project.getEndDate().plusDays(1));\r\n        this.save(project);\r\n    }\r\n\r\n    @Override\r\n    public void deleteProject(Integer projectId) throws Exception {\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, projectId);\r\n        Project project1 = this.getOne(wrapper);\r\n        if(Objects.isNull(project1)) {\r\n            //未找到项目\r\n            throw new Exception((\"项目号不存在\"));\r\n        }\r\n        this.remove(wrapper);\r\n    }\r\n\r\n    @Override\r\n    public void updateProject(Project project) throws Exception {\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, project.getProjectId());\r\n        Project project1 = this.getOne(wrapper);\r\n        if(Objects.isNull(project1)) {\r\n            //未找到项目\r\n            throw new Exception((\"项目号不存在\"));\r\n        }\r\n        project.setBeginDate(project.getBeginDate().plusDays(1));\r\n        project.setEndDate(project.getEndDate().plusDays(1));\r\n        this.update(project, wrapper);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getProjectList(Long pageNo, Long pageSize, Integer projectId, String projectName){\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(projectId != null, Project::getProjectId, projectId);\r\n        wrapper.like(Project::getProjectName, projectName);\r\n        wrapper.orderByAsc(Project::getProjectId);\r\n\r\n        IPage<Project> page = new Page<>(pageNo, pageSize);\r\n        this.page(page, wrapper);\r\n\r\n        //封装 map\r\n        HashMap<String, Object> data = new HashMap<>();\r\n        data.put(\"total\", page.getTotal());\r\n        data.put(\"projectList\", page.getRecords());\r\n\r\n        return data;\r\n    }\r\n\r\n    @Override\r\n    public Project getProjectById(Integer projectId) throws Exception{\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, projectId);\r\n        Project project = this.getOne(wrapper);\r\n        if(Objects.isNull(project))\r\n            throw new Exception(\"未找到项目\");\r\n        return project;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java	(revision 98f80f6fe1c9f0c87f3ed071fe0562e874ffd329)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java	(date 1689228264356)
@@ -106,4 +106,14 @@
         return project;
     }
 
+    @Override
+    public Integer getVolumeById(Integer projectId) throws Exception {
+        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();
+        wrapper.eq(Project::getProjectId, projectId);
+        Project project = this.getOne(wrapper);
+        if(Objects.isNull(project))
+            throw new Exception("未找到项目");
+        return project.getVolume();
+    }
+
 }
Index: meeting-server/src/main/java/com/fan/server/controller/TeamController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.controller;\r\n\r\n\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.Project;\r\nimport com.fan.server.pojo.Team;\r\nimport com.fan.server.service.ITeamService;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n * 前端控制器\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@RestController\r\n@RequestMapping(\"/team\")\r\npublic class TeamController {\r\n\r\n    @Autowired\r\n    private ITeamService teamService;\r\n\r\n    @PostMapping(\"/addTeam\")\r\n    @ApiOperation(\"添加团队接口\")\r\n    public Result<?> addTeam(@RequestBody Team team) {\r\n        try {\r\n            teamService.addTeam(team.getTeamName(), team.getProjectId());\r\n            return Result.success(\"添加团队成功\");\r\n        } catch (Exception e) {\r\n            return Result.fail(\"项目不存在\");\r\n        }\r\n    }\r\n\r\n\r\n    @DeleteMapping(\"/deleteTeam\")\r\n    @ApiOperation(\"删除团队接口\")\r\n    public Result<?> delete(@RequestBody String teamId) {\r\n        try {\r\n            teamService.deleteTeam(teamId);\r\n            return Result.success(\"删除团队成功\");\r\n        } catch (Exception e) {\r\n            return Result.fail(\"团队不存在\");\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/getTeamList\")\r\n    @ApiOperation(\"获取所有团队接口\")\r\n    public Result<Map<String, Object>> getTeamList(\r\n            @RequestParam(\"pageNo\") Long pageNo,\r\n            @RequestParam(\"pageSize\") Long pageSize,\r\n            @RequestParam(required = false, value = \"teamName\") String teamName\r\n    ) {\r\n        try {\r\n            Map<String, Object> data = teamService.getTeamList(pageNo, pageSize, teamName);\r\n            return Result.success(data, \"获取团队列表成功\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Result.fail(202);\r\n    }\r\n\r\n    @PostMapping(\"/updateTeam\")\r\n    @ApiOperation(\"更新团队信息接口\")\r\n    public Result<?> updateProject(@RequestBody Team team) {\r\n        try {\r\n            teamService.updateTeam(team);\r\n            return Result.success(\"更新团队成功\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Result.fail(202);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/controller/TeamController.java b/meeting-server/src/main/java/com/fan/server/controller/TeamController.java
--- a/meeting-server/src/main/java/com/fan/server/controller/TeamController.java	(revision 98f80f6fe1c9f0c87f3ed071fe0562e874ffd329)
+++ b/meeting-server/src/main/java/com/fan/server/controller/TeamController.java	(date 1689212833974)
@@ -33,7 +33,7 @@
             teamService.addTeam(team.getTeamName(), team.getProjectId());
             return Result.success("添加团队成功");
         } catch (Exception e) {
-            return Result.fail("项目不存在");
+            return Result.fail(e.getMessage());
         }
     }
 
Index: meeting-server/src/main/java/com/fan/server/service/IProjectService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.Project;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\nimport org.springframework.security.core.parameters.P;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface IProjectService extends IService<Project> {\r\n\r\n    void addProject(Project project) throws Exception;\r\n\r\n    void deleteProject(Integer projectId) throws Exception;\r\n\r\n    void updateProject(Project project) throws Exception;\r\n\r\n    Map<String, Object> getProjectList(Long pageNo, Long pageSize, Integer projectId, String projectName);\r\n\r\n    Project getProjectById(Integer projectId) throws Exception;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IProjectService.java b/meeting-server/src/main/java/com/fan/server/service/IProjectService.java
--- a/meeting-server/src/main/java/com/fan/server/service/IProjectService.java	(revision 98f80f6fe1c9f0c87f3ed071fe0562e874ffd329)
+++ b/meeting-server/src/main/java/com/fan/server/service/IProjectService.java	(date 1689228264361)
@@ -26,4 +26,6 @@
 
     Project getProjectById(Integer projectId) throws Exception;
 
+    Integer getVolumeById(Integer projectId) throws Exception;
+
 }
