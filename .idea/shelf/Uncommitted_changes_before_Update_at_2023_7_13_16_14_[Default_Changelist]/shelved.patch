Index: meeting-server/src/main/java/com/fan/server/controller/MessageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.controller;\r\n\r\n\r\nimport com.baomidou.mybatisplus.extension.api.R;\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.Message;\r\nimport com.fan.server.service.IMessageService;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  前端控制器\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@RestController\r\n@RequestMapping(\"/message\")\r\npublic class MessageController {\r\n\r\n    @Autowired\r\n    IMessageService messageService;\r\n\r\n    @PostMapping(\"/addMessage\")\r\n    @ApiOperation(\"添加留言接口\")\r\n    public Result<?> addMessage(@RequestBody Message message) {\r\n        try {\r\n            messageService.addMessage(message);\r\n            return Result.success(\"添加留言成功\");\r\n        }catch (Exception e){\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/getMessageList\")\r\n    @ApiOperation(\"获取留言列表接口\")\r\n    public Result<Map<String, Object>> getMessageList(\r\n            @RequestParam(\"pageNo\") Long pageNo,\r\n            @RequestParam(\"pageSize\") Long pageSize\r\n    ){\r\n        try {\r\n            Map<String, Object> data = messageService.getMessageList(pageNo, pageSize);\r\n            return Result.success(data, \"获取留言列表成功\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Result.fail(202);\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/controller/MessageController.java b/meeting-server/src/main/java/com/fan/server/controller/MessageController.java
--- a/meeting-server/src/main/java/com/fan/server/controller/MessageController.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/controller/MessageController.java	(date 1689235996552)
@@ -39,12 +39,9 @@
 
     @GetMapping("/getMessageList")
     @ApiOperation("获取留言列表接口")
-    public Result<Map<String, Object>> getMessageList(
-            @RequestParam("pageNo") Long pageNo,
-            @RequestParam("pageSize") Long pageSize
-    ){
+    public Result<Map<String, Object>> getMessageList(){
         try {
-            Map<String, Object> data = messageService.getMessageList(pageNo, pageSize);
+            Map<String, Object> data = messageService.getMessageList();
             return Result.success(data, "获取留言列表成功");
         } catch (Exception e) {
             e.printStackTrace();
Index: meeting-server/src/main/java/com/fan/server/pojo/Message.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.pojo;\r\n\r\nimport com.baomidou.mybatisplus.annotation.IdType;\r\nimport com.baomidou.mybatisplus.annotation.TableId;\r\nimport com.baomidou.mybatisplus.annotation.TableName;\r\nimport java.time.LocalDate;\r\nimport com.baomidou.mybatisplus.annotation.TableField;\r\nimport java.io.Serializable;\r\nimport io.swagger.annotations.ApiModel;\r\nimport io.swagger.annotations.ApiModelProperty;\r\nimport lombok.Data;\r\nimport lombok.EqualsAndHashCode;\r\nimport lombok.experimental.Accessors;\r\n\r\n/**\r\n * <p>\r\n * \r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Data\r\n@EqualsAndHashCode(callSuper = false)\r\n@Accessors(chain = true)\r\n@TableName(\"message\")\r\n@ApiModel(value=\"Message对象\", description=\"\")\r\npublic class Message implements Serializable {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    @TableId(value = \"id\", type = IdType.AUTO)\r\n    private Integer id;\r\n\r\n    @ApiModelProperty(value = \"发布时间\")\r\n    @TableField(\"message_date\")\r\n    private LocalDate messageDate;\r\n\r\n    @ApiModelProperty(value = \"留言内容\")\r\n    private String content;\r\n\r\n    @ApiModelProperty(value = \"学号\")\r\n    @TableField(\"student_id\")\r\n    private String studentId;\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/pojo/Message.java b/meeting-server/src/main/java/com/fan/server/pojo/Message.java
--- a/meeting-server/src/main/java/com/fan/server/pojo/Message.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/pojo/Message.java	(date 1689235996557)
@@ -39,9 +39,9 @@
     @ApiModelProperty(value = "留言内容")
     private String content;
 
-    @ApiModelProperty(value = "学号")
-    @TableField("student_id")
-    private String studentId;
+    @ApiModelProperty(value = "手机号")
+    @TableField("mobile")
+    private String mobilephone;
 
 
 }
Index: meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.fan.server.pojo.*;\r\nimport com.fan.server.mapper.StudentTeamMapper;\r\nimport com.fan.server.service.IProjectService;\r\nimport com.fan.server.service.IStudentService;\r\nimport com.fan.server.service.IStudentTeamService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.fan.server.service.ITeamService;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport io.swagger.models.auth.In;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.*;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class StudentTeamServiceImpl extends ServiceImpl<StudentTeamMapper, StudentTeam> implements IStudentTeamService {\r\n\r\n    @Autowired\r\n    IStudentService studentService;\r\n\r\n    @Autowired\r\n    ITeamService teamService;\r\n\r\n    @Autowired\r\n    IProjectService projectService;\r\n\r\n    @Override\r\n    public void addStudentTeam(String mobilephone, String teamId, String position) throws Exception {\r\n        StudentTeam studentTeam = new StudentTeam();\r\n        Integer studentId;\r\n        try {\r\n            studentId = studentService.getStudentIdByMobilephone(mobilephone);\r\n        }catch (Exception e){\r\n            throw new Exception(\"学生不存在\");\r\n        }\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getStudentId, studentId);\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        if(!Objects.isNull(this.getOne(wrapper))){\r\n            //非空，查询到了\r\n            throw new Exception(\"该学生已经在该团队了\");\r\n        }\r\n        try{\r\n            teamService.TeamNumberPlusOne(teamId);\r\n        }catch (Exception e){\r\n            throw new Exception(\"团队不存在\");\r\n        }\r\n        studentTeam.setStudentId(studentId);\r\n        studentTeam.setPosition(position);\r\n        studentTeam.setTeamId(teamId);\r\n        studentTeam.setGrade(\"0\");\r\n        this.save(studentTeam);\r\n    }\r\n\r\n    @Override\r\n    public void deleteStudentTeam(String mobilephone, String teamId) throws Exception{\r\n        Integer studentId;\r\n        try {\r\n            studentId = studentService.getStudentIdByMobilephone(mobilephone);\r\n        }catch (Exception e){\r\n            throw new Exception(\"学生不存在\");\r\n        }\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getStudentId, studentId);\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        if(Objects.isNull(this.getOne(wrapper))){\r\n            //为空，代表该学生不在该团队\r\n            throw new Exception(\"学生不在该团队，无法删除\");\r\n        }\r\n        try{\r\n            teamService.TeamNumberSubOne(teamId);\r\n        }catch (Exception e){\r\n            throw new Exception(\"团队不存在\");\r\n        }\r\n        this.remove(wrapper);\r\n    }\r\n\r\n    @Override\r\n    public void deleteTeam(String teamId) throws Exception{\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        this.remove(wrapper);\r\n        teamService.deleteTeam(teamId);\r\n    }\r\n\r\n    @Override\r\n    public void deleteStudentTeam(StudentTeam studentTeam) {\r\n        removeById(studentTeam.getId());\r\n    }\r\n\r\n    @Override\r\n    public void updateStudentTeam(String teamName, Integer projectId, String teamId, List<String> selectedStudentList) throws Exception {\r\n        LambdaQueryWrapper<StudentTeam> studentTeamWrapper = new LambdaQueryWrapper<>();\r\n        studentTeamWrapper.eq(StudentTeam::getTeamId, teamId);\r\n        List<StudentTeam> preList = this.list(studentTeamWrapper);\r\n        preList.forEach(this::deleteStudentTeam);\r\n        Team team = new Team();\r\n        team.setTeamId(teamId);\r\n        team.setTeamNumber(0);\r\n        team.setTeamName(teamName);\r\n        team.setProjectId(projectId);\r\n        teamService.updateTeam(team);\r\n        selectedStudentList.forEach((value) -> {\r\n            String[] nowString = value.split(\"-\");\r\n            try {\r\n                addStudentTeam(nowString[0], teamId, nowString[1]);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getStudentListByTeamId(Long pageNo, Long pageSize, String teamId) {\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        wrapper.orderByAsc(StudentTeam::getStudentId);\r\n\r\n        IPage<StudentTeam> page = new Page<>(pageNo, pageSize);\r\n        this.page(page, wrapper);\r\n\r\n        //封装 map\r\n        HashMap<String, Object> data = new HashMap<>();\r\n        data.put(\"total\", page.getTotal());\r\n        data.put(\"StudentList\", page.getRecords());\r\n\r\n        return data;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getTeamInfById(String teamId) {\r\n        Team team = teamService.getTeamByTeamId(teamId);\r\n        Map<String, Object> data = new HashMap<>();\r\n        data.put(\"teamName\", team.getTeamName());\r\n        data.put(\"projectId\", team.getProjectId());\r\n        try {\r\n            data.put(\"volume\", projectService.getVolumeById(team.getProjectId()));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentTeam::getTeamId, teamId);\r\n        List<StudentTeam> list = this.list(wrapper);\r\n        List<StudentTeamInf> list1 = new ArrayList<>();\r\n        list.forEach((value) -> {\r\n            StudentTeamInf now = new StudentTeamInf();\r\n            now.setStudentTeamInf(value);\r\n            try {\r\n                now.setMobilephone(studentService.getStudentMobilephoneById(value.getStudentId()));\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            list1.add(now);\r\n        });\r\n        data.put(\"selectedStudentList\", list1);\r\n        return data;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/StudentTeamServiceImpl.java	(date 1689235996562)
@@ -169,4 +169,31 @@
         return data;
     }
 
+    @Override
+    public Map<String, Object> getTeamInfomation(String teamId) throws Exception {
+        Team team = teamService.getTeamByTeamId(teamId);
+        Map<String, Object> data = new HashMap<>();
+        data.put("teamName", team.getTeamName());
+        data.put("projectId", team.getProjectId());
+        data.put("projectName", projectService.getProjectNameById(team.getProjectId()));
+        LambdaQueryWrapper<StudentTeam> wrapper = new LambdaQueryWrapper<>();
+        wrapper.eq(StudentTeam::getTeamId, teamId);
+        List<StudentTeam> list = this.list(wrapper);
+        List<StudentTeamInf> list1 = new ArrayList<>();
+        list.forEach((value) -> {
+            StudentTeamInf now = new StudentTeamInf();
+            now.setStudentTeamInf(value);
+            try {
+                String nowMobilephone = studentService.getStudentMobilephoneById(value.getStudentId());
+                now.setMobilephone(nowMobilephone);
+                now.setStudentName(studentService.getStudentNameByMobilephone(nowMobilephone));
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            list1.add(now);
+        });
+        data.put("selectedStudentList", list1);
+        return data;
+    }
+
 }
Index: meeting-server/src/main/java/com/fan/server/service/impl/MessageServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.fan.server.pojo.Message;\r\nimport com.fan.server.mapper.MessageMapper;\r\nimport com.fan.server.pojo.Project;\r\nimport com.fan.server.service.IMessageService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class MessageServiceImpl extends ServiceImpl<MessageMapper, Message> implements IMessageService {\r\n\r\n    @Override\r\n    public void addMessage(Message message) {\r\n        this.save(message);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getMessageList(Long pageNo, Long pageSize) {\r\n        LambdaQueryWrapper<Message> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.orderByDesc(Message::getMessageDate);\r\n\r\n        IPage<Message> page = new Page<>(pageNo, pageSize);\r\n        this.page(page, wrapper);\r\n\r\n        //封装 map\r\n        HashMap<String, Object> data = new HashMap<>();\r\n        data.put(\"total\", page.getTotal());\r\n        data.put(\"messageList\", page.getRecords());\r\n\r\n        return data;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/MessageServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/MessageServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/MessageServiceImpl.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/MessageServiceImpl.java	(date 1689235996567)
@@ -5,12 +5,17 @@
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.fan.server.pojo.Message;
 import com.fan.server.mapper.MessageMapper;
+import com.fan.server.pojo.MessageAndName;
 import com.fan.server.pojo.Project;
 import com.fan.server.service.IMessageService;
 import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
+import com.fan.server.service.IStudentService;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 /**
@@ -24,13 +29,16 @@
 @Service
 public class MessageServiceImpl extends ServiceImpl<MessageMapper, Message> implements IMessageService {
 
+    @Autowired
+    IStudentService studentService;
+
     @Override
     public void addMessage(Message message) {
         this.save(message);
     }
 
     @Override
-    public Map<String, Object> getMessageList(Long pageNo, Long pageSize) {
+    public Map<String, Object> getMessageListByPage(Long pageNo, Long pageSize) {
         LambdaQueryWrapper<Message> wrapper = new LambdaQueryWrapper<>();
         wrapper.orderByDesc(Message::getMessageDate);
 
@@ -42,6 +50,25 @@
         data.put("total", page.getTotal());
         data.put("messageList", page.getRecords());
 
+        return data;
+    }
+
+    @Override
+    public Map<String, Object> getMessageList() {
+        Map<String, Object> data = new HashMap<>();
+        LambdaQueryWrapper<Message> wrapper = new LambdaQueryWrapper<>();
+        List<Message> list =  this.list(wrapper);
+        List<MessageAndName> list1 = new ArrayList<>();
+        list.forEach((value) -> {
+            MessageAndName now = new MessageAndName();
+            now.setMessageInf(value);
+            try {
+                now.setStudentName(studentService.getStudentNameByMobilephone(value.getMobilephone()));
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        });
+        data.put("messageList", list1);
         return data;
     }
 
Index: meeting-server/src/main/java/com/fan/server/service/IStudentTeamService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.StudentTeam;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface IStudentTeamService extends IService<StudentTeam> {\r\n\r\n    void addStudentTeam(String mobilephone, String teamId, String position) throws Exception;\r\n\r\n    void deleteStudentTeam(String mobilephone, String teamId) throws Exception;\r\n\r\n    void updateStudentTeam(String teamName, Integer projectId, String teamId, List<String> selectedStudentList) throws Exception;\r\n\r\n    Map<String, Object> getStudentListByTeamId(Long pageNo, Long pageSize, String teamId);\r\n\r\n    void deleteStudentTeam(StudentTeam studentTeam);\r\n\r\n    Map<String ,Object> getTeamInfById(String teamId);\r\n\r\n    void deleteTeam(String teamId) throws Exception;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IStudentTeamService.java b/meeting-server/src/main/java/com/fan/server/service/IStudentTeamService.java
--- a/meeting-server/src/main/java/com/fan/server/service/IStudentTeamService.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/service/IStudentTeamService.java	(date 1689235996571)
@@ -30,4 +30,6 @@
 
     void deleteTeam(String teamId) throws Exception;
 
+    Map<String, Object> getTeamInfomation(String teamId) throws Exception;
+
 }
Index: meeting-server/src/main/java/com/fan/server/service/IMessageService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.Message;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface IMessageService extends IService<Message> {\r\n\r\n    void addMessage(Message message);\r\n\r\n    Map<String, Object> getMessageList(Long pageNo, Long pageSize);\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IMessageService.java b/meeting-server/src/main/java/com/fan/server/service/IMessageService.java
--- a/meeting-server/src/main/java/com/fan/server/service/IMessageService.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/service/IMessageService.java	(date 1689235996575)
@@ -17,6 +17,8 @@
 
     void addMessage(Message message);
 
-    Map<String, Object> getMessageList(Long pageNo, Long pageSize);
+    Map<String, Object> getMessageListByPage(Long pageNo, Long pageSize);
+
+    Map<String, Object> getMessageList();
 
 }
\ No newline at end of file
Index: meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.controller;\r\n\r\n\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.StudentTeam;\r\nimport com.fan.server.service.IStudentTeamService;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n * 前端控制器\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@RestController\r\n@RequestMapping(\"/student-team\")\r\npublic class StudentTeamController {\r\n\r\n    @Autowired\r\n    IStudentTeamService studentTeamService;\r\n\r\n    @PostMapping(\"/addStudentTeam\")\r\n    @ApiOperation(\"为团队添加成员接口\")\r\n    public Result<?> addStudentTeam(@RequestParam String mobilephone,\r\n                                    @RequestParam String teamId,\r\n                                    @RequestParam String position) {\r\n        try {\r\n            studentTeamService.addStudentTeam(mobilephone, teamId, position);\r\n            return Result.success(\"添加成员成功\");\r\n        } catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @DeleteMapping(\"/deleteStudentTeam\")\r\n    @ApiOperation(\"从团队删除学生接口\")\r\n    public Result<?> deleteStudentTeam(@RequestParam String mobilephone,\r\n                                       @RequestParam String teamId) {\r\n        try {\r\n            studentTeamService.deleteStudentTeam(mobilephone, teamId);\r\n            return Result.success(\"删除成员成功\");\r\n        } catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/updateStudentTeam\")\r\n    @ApiOperation(\"更新学生在团队中的信息接口\")\r\n    public Result<?> updateStudentTeam(\r\n            @RequestParam(value = \"teamName\") String teamName,\r\n            @RequestParam(value = \"projectId\") Integer projectId,\r\n            @RequestParam(value = \"teamId\") String teamId,\r\n            @RequestParam(value = \"selectedStudentList\") List<String> selectedStudentList\r\n    ) {\r\n        try {\r\n            studentTeamService.updateStudentTeam(teamName, projectId, teamId, selectedStudentList);\r\n            return Result.success(\"修改成功\");\r\n        } catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/getStudentListByTeamId\")\r\n    @ApiOperation(\"通过团队id查询成员接口\")\r\n    public Result<Map<String, Object>> getStudentListByTeamId(\r\n            @RequestParam(\"pageNo\") Long pageNo,\r\n            @RequestParam(\"pageSize\") Long pageSize,\r\n            @RequestParam(required = false, value = \"teamId\") String teamId) {\r\n        try {\r\n            Map<String, Object> data = studentTeamService.getStudentListByTeamId(pageNo, pageSize, teamId);\r\n            return Result.success(data, \"获取成员成功\");\r\n        } catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/getTeamInfById\")\r\n    @ApiOperation(\"获取团队所有信息接口\")\r\n    public Result<Map<String, Object>> getTeamInfById(@RequestParam String teamId) {\r\n        try {\r\n            Map<String, Object> data = studentTeamService.getTeamInfById(teamId);\r\n            /*\r\n            * teamName\r\n            * projectId\r\n            * volume\r\n            * selectedStudentList\r\n            * */\r\n            return Result.success(data, \"获取团队信息成功\");\r\n        }catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @DeleteMapping(\"/deleteTeam\")\r\n    @ApiOperation(\"删除整个团队\")\r\n    public Result<?> deleteTeam(@RequestParam String teamId) {\r\n        try {\r\n            studentTeamService.deleteTeam(teamId);\r\n            return Result.success(\"删除成功\");\r\n        } catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java b/meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java
--- a/meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/controller/StudentTeamController.java	(date 1689235996578)
@@ -100,7 +100,7 @@
     }
 
     @DeleteMapping("/deleteTeam")
-    @ApiOperation("删除整个团队")
+    @ApiOperation("删除整个团队接口")
     public Result<?> deleteTeam(@RequestParam String teamId) {
         try {
             studentTeamService.deleteTeam(teamId);
@@ -109,5 +109,22 @@
             return Result.fail(e.getMessage());
         }
     }
+
+    @GetMapping("/getTeamInfomation")
+    @ApiOperation("获取团队信息和成员所有信息接口")
+    public Result<?> getTeamInfomation(@RequestParam String teamId) {
+        try {
+            Map<String, Object> data = studentTeamService.getTeamInfomation(teamId);
+            /*
+             * teamName
+             * projectId
+             * projectName
+             * studentList
+             * */
+            return Result.success(data, "获取团队信息成功");
+        }catch (Exception e) {
+            return Result.fail(e.getMessage());
+        }
+    }
 
 }
Index: meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.mapper.StudentMapper;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.IStudentService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.fan.server.utils.JwtUtil;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.Objects;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class StudentServiceImpl extends ServiceImpl<StudentMapper, Student> implements IStudentService {\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    @Autowired\r\n    private JwtUtil jwtUtil;\r\n\r\n    @Override\r\n    public void register(User user) throws Exception {\r\n        // 判断 student 表是否存在 mobilePhone\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, user.getUsername());\r\n        Student student = this.getOne(wrapper);\r\n        if (!Objects.isNull(student)) {\r\n            // 非空\r\n            throw new Exception(\"手机号存在，注册失败，请重新注册\");\r\n        }\r\n        // 空直接添加\r\n        Student res = new Student();\r\n        res.setMobilephone(user.getUsername());\r\n        res.setPassword(passwordEncoder.encode(user.getPassword()));\r\n        this.save(res);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> login(User user) {\r\n        // 查询学生是否存在\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, user.getUsername());\r\n        // 根据登录用户传入的用户名，查询数据库里的用户\r\n        Student dbUser = this.getOne(wrapper);\r\n        // 判断是否非空\r\n        if (!Objects.isNull(dbUser) && passwordEncoder.matches(user.getPassword(), dbUser.getPassword())) {\r\n            // 设置 Jwt 中的密码为明文密码，因为要在个人信息中修改，必须要存密码\r\n            dbUser.setPassword(user.getPassword());\r\n            // 生成 Jwt\r\n            String token;\r\n            try {\r\n                token = jwtUtil.createToken(dbUser, \"1\");\r\n                // 返回数据\r\n                HashMap<String, Object> data = new HashMap<>();\r\n                data.put(\"token\", token);\r\n                return data;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getInfo(String token) {\r\n        Student student = jwtUtil.parseToken(token, Student.class);\r\n        if (!Objects.isNull(student)) {\r\n            HashMap<String, Object> data = new HashMap<>();\r\n            // 根据 studentId 查询学生表\r\n            LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n            wrapper.eq(Student::getMobilephone, student.getMobilephone());\r\n            // 从数据库里查询学生，不从 token 里直接拿，因为在登录之后\r\n            // 学生信息有可能被修改\r\n            Student modifyStudent = this.getOne(wrapper);\r\n            data.put(\"studentId\", modifyStudent.getStudentId());\r\n            data.put(\"studentName\", modifyStudent.getStudentName());\r\n            data.put(\"mobilephone\", modifyStudent.getMobilephone());\r\n            data.put(\"password\", student.getPassword());\r\n            data.put(\"gender\", modifyStudent.getGender());\r\n            if (modifyStudent.getBirthday() != null) {\r\n                data.put(\"birthday\", modifyStudent.getBirthday().toString());\r\n            } else {\r\n                data.put(\"birthday\", null);\r\n            }\r\n            data.put(\"college\", modifyStudent.getCollege());\r\n            data.put(\"major\", modifyStudent.getMajor());\r\n            data.put(\"majorClass\", modifyStudent.getMajorClass());\r\n            data.put(\"avatar\", modifyStudent.getAvatar());\r\n\r\n            return data;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Boolean updateInformation(Student student) throws Exception{\r\n        // 根据 studentId 查询用户\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, student.getMobilephone());\r\n        Student dbStudent = this.getOne(wrapper);\r\n        if(Objects.isNull(dbStudent))\r\n            throw new Exception(\"用户不存在\");\r\n        // 判断密码是否修改   true：密码匹配，未修改，    false：密码不匹配，修改了密码\r\n        boolean isMatchPassword = passwordEncoder.matches(student.getPassword(), dbStudent.getPassword());\r\n        // 修改用户时，要把密码加密存到数据库\r\n        student.setPassword(passwordEncoder.encode(student.getPassword()));\r\n        // 要把生日 + 1 天，才能正确对应\r\n        LocalDate birthday = student.getBirthday();\r\n        LocalDate correctBirthday = birthday.plusDays(1);\r\n        student.setBirthday(correctBirthday);\r\n        // 修改\r\n        this.update(student, wrapper);\r\n        // 返回\r\n        return isMatchPassword;\r\n    }\r\n\r\n    @Override\r\n    public Integer getStudentIdByMobilephone(String mobilephone) throws Exception{\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, mobilephone);\r\n        Student student = this.getOne(wrapper);\r\n        if(Objects.isNull(student))\r\n                throw new Exception(\"用户不存在\");\r\n        return student.getId();\r\n    }\r\n\r\n    @Override\r\n    public String getStudentMobilephoneById(Integer id) throws Exception{\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getId, id);\r\n        Student student = this.getOne(wrapper);\r\n        if(Objects.isNull(student))\r\n            throw new Exception(\"用户不存在\");\r\n        return student.getMobilephone();\r\n    }\r\n\r\n    @Override\r\n    public Map<String, String> getStudentNameByMobilephone(String mobilephone) throws Exception {\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, mobilephone);\r\n        Student student = this.getOne(wrapper);\r\n        if(Objects.isNull(student)) {\r\n            //为空\r\n            throw new Exception(\"未找到该学生\");\r\n        }\r\n        HashMap<String, String> data = new HashMap<>();\r\n        data.put(\"studentName\", student.getStudentName());\r\n        return data;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java	(date 1689235996582)
@@ -152,7 +152,7 @@
     }
 
     @Override
-    public Map<String, String> getStudentNameByMobilephone(String mobilephone) throws Exception {
+    public String getStudentNameByMobilephone(String mobilephone) throws Exception {
         LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();
         wrapper.eq(Student::getMobilephone, mobilephone);
         Student student = this.getOne(wrapper);
@@ -160,9 +160,7 @@
             //为空
             throw new Exception("未找到该学生");
         }
-        HashMap<String, String> data = new HashMap<>();
-        data.put("studentName", student.getStudentName());
-        return data;
+        return student.getStudentName();
     }
 
 }
Index: meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.Project;\r\nimport com.fan.server.mapper.ProjectMapper;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.IProjectService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.core.parameters.P;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nimport static ch.qos.logback.core.joran.action.ActionConst.NULL;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class ProjectServiceImpl extends ServiceImpl<ProjectMapper, Project> implements IProjectService {\r\n\r\n    @Override\r\n    public void addProject(Project project) throws Exception {\r\n        // 判断 student 表是否存在 mobilePhone\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, project.getProjectId());\r\n        Project project1 = this.getOne(wrapper);\r\n        if (!Objects.isNull(project1)) {\r\n            // 非空\r\n            throw new Exception(\"项目号已存在\");\r\n        }\r\n        // 空直接添加\r\n        project.setBeginDate(project.getBeginDate().plusDays(1));\r\n        project.setEndDate(project.getEndDate().plusDays(1));\r\n        this.save(project);\r\n    }\r\n\r\n    @Override\r\n    public void deleteProject(Integer projectId) throws Exception {\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, projectId);\r\n        Project project1 = this.getOne(wrapper);\r\n        if(Objects.isNull(project1)) {\r\n            //未找到项目\r\n            throw new Exception((\"项目号不存在\"));\r\n        }\r\n        this.remove(wrapper);\r\n    }\r\n\r\n    @Override\r\n    public void updateProject(Project project) throws Exception {\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, project.getProjectId());\r\n        Project project1 = this.getOne(wrapper);\r\n        if(Objects.isNull(project1)) {\r\n            //未找到项目\r\n            throw new Exception((\"项目号不存在\"));\r\n        }\r\n        project.setBeginDate(project.getBeginDate().plusDays(1));\r\n        project.setEndDate(project.getEndDate().plusDays(1));\r\n        this.update(project, wrapper);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getProjectList(Long pageNo, Long pageSize, Integer projectId, String projectName){\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(projectId != null, Project::getProjectId, projectId);\r\n        wrapper.like(Project::getProjectName, projectName);\r\n        wrapper.orderByAsc(Project::getProjectId);\r\n\r\n        IPage<Project> page = new Page<>(pageNo, pageSize);\r\n        this.page(page, wrapper);\r\n\r\n        //封装 map\r\n        HashMap<String, Object> data = new HashMap<>();\r\n        data.put(\"total\", page.getTotal());\r\n        data.put(\"projectList\", page.getRecords());\r\n\r\n        return data;\r\n    }\r\n\r\n    @Override\r\n    public Project getProjectById(Integer projectId) throws Exception{\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, projectId);\r\n        Project project = this.getOne(wrapper);\r\n        if(Objects.isNull(project))\r\n            throw new Exception(\"未找到项目\");\r\n        return project;\r\n    }\r\n\r\n    @Override\r\n    public Integer getVolumeById(Integer projectId) throws Exception {\r\n        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Project::getProjectId, projectId);\r\n        Project project = this.getOne(wrapper);\r\n        if(Objects.isNull(project))\r\n            throw new Exception(\"未找到项目\");\r\n        return project.getVolume();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/ProjectServiceImpl.java	(date 1689235996585)
@@ -116,4 +116,14 @@
         return project.getVolume();
     }
 
+    @Override
+    public String getProjectNameById(Integer projectId) throws Exception {
+        LambdaQueryWrapper<Project> wrapper = new LambdaQueryWrapper<>();
+        wrapper.eq(Project::getProjectId, projectId);
+        Project project = this.getOne(wrapper);
+        if(Objects.isNull(project))
+            throw new Exception("未找到项目");
+        return project.getProjectName();
+    }
+
 }
Index: meeting-server/src/main/java/com/fan/server/pojo/StudentTeamInf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.pojo;\r\n\r\nimport com.baomidou.mybatisplus.annotation.TableField;\r\nimport io.swagger.annotations.ApiModelProperty;\r\nimport lombok.Data;\r\nimport lombok.EqualsAndHashCode;\r\nimport lombok.experimental.Accessors;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * <p>\r\n *\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Data\r\n@EqualsAndHashCode(callSuper = false)\r\n@Accessors(chain = true)\r\npublic class StudentTeamInf implements Serializable {\r\n\r\n    @ApiModelProperty(value = \"学生id\")\r\n    private Integer studentId;\r\n\r\n    @ApiModelProperty(value = \"团队id\")\r\n    private String teamId;\r\n\r\n    @ApiModelProperty(value = \"职位\")\r\n    private String position;\r\n\r\n    @ApiModelProperty(value = \"成绩\")\r\n    private String grade;\r\n\r\n    @ApiModelProperty(value = \"手机号\")\r\n    private String mobilephone;\r\n\r\n    public void setStudentTeamInf(StudentTeam studentTeam) {\r\n        this.setStudentId(studentTeam.getStudentId());\r\n        this.setTeamId(studentTeam.getTeamId());\r\n        this.setGrade(studentTeam.getGrade());\r\n        this.setPosition(studentTeam.getPosition());\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/pojo/StudentTeamInf.java b/meeting-server/src/main/java/com/fan/server/pojo/StudentTeamInf.java
--- a/meeting-server/src/main/java/com/fan/server/pojo/StudentTeamInf.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/pojo/StudentTeamInf.java	(date 1689235996588)
@@ -5,6 +5,7 @@
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.experimental.Accessors;
+import org.springframework.beans.factory.annotation.Autowired;
 
 import java.io.Serializable;
 
@@ -36,6 +37,9 @@
     @ApiModelProperty(value = "手机号")
     private String mobilephone;
 
+    @ApiModelProperty(value = "学生姓名")
+    private String studentName;
+
     public void setStudentTeamInf(StudentTeam studentTeam) {
         this.setStudentId(studentTeam.getStudentId());
         this.setTeamId(studentTeam.getTeamId());
Index: meeting-server/src/main/resources/mapper/MessageMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.fan.server.mapper.MessageMapper\">\r\n\r\n    <!-- 通用查询映射结果 -->\r\n    <resultMap id=\"BaseResultMap\" type=\"com.fan.server.pojo.Message\">\r\n        <id column=\"id\" property=\"id\" />\r\n        <result column=\"message_date\" property=\"messageDate\" />\r\n        <result column=\"content\" property=\"content\" />\r\n        <result column=\"student_id\" property=\"studentId\" />\r\n    </resultMap>\r\n\r\n    <!-- 通用查询结果列 -->\r\n    <sql id=\"Base_Column_List\">\r\n        <if test=\"true\">\r\n            id, message_date, content, student_id\r\n        </if>\r\n    </sql>\r\n\r\n</mapper>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/resources/mapper/MessageMapper.xml b/meeting-server/src/main/resources/mapper/MessageMapper.xml
--- a/meeting-server/src/main/resources/mapper/MessageMapper.xml	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/resources/mapper/MessageMapper.xml	(date 1689236043431)
@@ -7,7 +7,7 @@
         <id column="id" property="id" />
         <result column="message_date" property="messageDate" />
         <result column="content" property="content" />
-        <result column="student_id" property="studentId" />
+        <result column="mobilephone" property="mobilephone" />
     </resultMap>
 
     <!-- 通用查询结果列 -->
Index: meeting-server/src/main/java/com/fan/server/service/IStudentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.Student;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\nimport com.fan.server.pojo.User;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface IStudentService extends IService<Student> {\r\n\r\n    void register(User user) throws Exception;\r\n\r\n    Map<String, Object> login(User user);\r\n\r\n    Map<String, Object> getInfo(String token);\r\n\r\n    Boolean updateInformation(Student student) throws Exception;\r\n\r\n    Integer getStudentIdByMobilephone(String mobilephone) throws Exception;\r\n\r\n    String getStudentMobilephoneById(Integer id) throws Exception;\r\n\r\n    Map<String, String> getStudentNameByMobilephone(String mobilephone) throws Exception;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IStudentService.java b/meeting-server/src/main/java/com/fan/server/service/IStudentService.java
--- a/meeting-server/src/main/java/com/fan/server/service/IStudentService.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/service/IStudentService.java	(date 1689235996592)
@@ -28,6 +28,6 @@
 
     String getStudentMobilephoneById(Integer id) throws Exception;
 
-    Map<String, String> getStudentNameByMobilephone(String mobilephone) throws Exception;
+    String getStudentNameByMobilephone(String mobilephone) throws Exception;
 
 }
Index: meeting-server/src/main/java/com/fan/server/pojo/MessageAndName.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/pojo/MessageAndName.java b/meeting-server/src/main/java/com/fan/server/pojo/MessageAndName.java
new file mode 100644
--- /dev/null	(date 1689235996594)
+++ b/meeting-server/src/main/java/com/fan/server/pojo/MessageAndName.java	(date 1689235996594)
@@ -0,0 +1,46 @@
+package com.fan.server.pojo;
+
+import com.baomidou.mybatisplus.annotation.IdType;
+import com.baomidou.mybatisplus.annotation.TableField;
+import com.baomidou.mybatisplus.annotation.TableId;
+import io.swagger.annotations.ApiModelProperty;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.experimental.Accessors;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import java.io.Serializable;
+import java.time.LocalDate;
+
+/**
+ * <p>
+ *
+ * </p>
+ *
+ * @author BestOfTheWorld
+ * @since 2023-07-05
+ */
+@Data
+@EqualsAndHashCode(callSuper = false)
+@Accessors(chain = true)
+public class MessageAndName implements Serializable{
+
+    @ApiModelProperty(value = "发布时间")
+    private LocalDate messageDate;
+
+    @ApiModelProperty(value = "留言内容")
+    private String content;
+
+    @ApiModelProperty(value = "手机号")
+    private String mobilephone;
+
+    @ApiModelProperty(value = "学生姓名")
+    private String StudentName;
+
+    public void setMessageInf(Message message) {
+        this.setMessageDate(message.getMessageDate());
+        this.setContent(message.getContent());
+        this.setMobilephone(message.getMobilephone());
+    }
+
+}
Index: meeting-server/src/main/java/com/fan/server/service/IProjectService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.Project;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\nimport org.springframework.security.core.parameters.P;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface IProjectService extends IService<Project> {\r\n\r\n    void addProject(Project project) throws Exception;\r\n\r\n    void deleteProject(Integer projectId) throws Exception;\r\n\r\n    void updateProject(Project project) throws Exception;\r\n\r\n    Map<String, Object> getProjectList(Long pageNo, Long pageSize, Integer projectId, String projectName);\r\n\r\n    Project getProjectById(Integer projectId) throws Exception;\r\n\r\n    Integer getVolumeById(Integer projectId) throws Exception;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IProjectService.java b/meeting-server/src/main/java/com/fan/server/service/IProjectService.java
--- a/meeting-server/src/main/java/com/fan/server/service/IProjectService.java	(revision 3ce997b53461b63b5367cf39998f29068ae437a5)
+++ b/meeting-server/src/main/java/com/fan/server/service/IProjectService.java	(date 1689235996597)
@@ -28,4 +28,6 @@
 
     Integer getVolumeById(Integer projectId) throws Exception;
 
+    String getProjectNameById(Integer projectId) throws Exception;
+
 }
