Index: meeting-server/src/main/java/com/fan/server/service/IStudentLogService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service;\r\n\r\nimport com.fan.server.pojo.StudentLog;\r\nimport com.baomidou.mybatisplus.extension.service.IService;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\npublic interface IStudentLogService extends IService<StudentLog> {\r\n\r\n    void addStudentLog(String content, String mobilephone) throws Exception;\r\n\r\n    void updateStudentLog(StudentLog studentLog) throws Exception;\r\n\r\n    void deleteStudentLog(StudentLog studentLog);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/IStudentLogService.java b/meeting-server/src/main/java/com/fan/server/service/IStudentLogService.java
--- a/meeting-server/src/main/java/com/fan/server/service/IStudentLogService.java	(revision b93c3e48c71d083fd1fc9cdfd9143cd2ad96dbfe)
+++ b/meeting-server/src/main/java/com/fan/server/service/IStudentLogService.java	(date 1689296792486)
@@ -22,4 +22,6 @@
 
     void deleteStudentLog(StudentLog studentLog);
 
+    Map<String, Object> getStudentLogList(Long pageNo, Long pageSize, Integer id);
+
 }
Index: meeting-server/src/main/java/com/fan/server/service/impl/StudentLogServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.pojo.StudentLog;\r\nimport com.fan.server.mapper.StudentLogMapper;\r\nimport com.fan.server.service.IStudentLogService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.fan.server.service.IStudentService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class StudentLogServiceImpl extends ServiceImpl<StudentLogMapper, StudentLog> implements IStudentLogService {\r\n\r\n    @Autowired\r\n    IStudentService studentService;\r\n\r\n    @Override\r\n    public void addStudentLog(String content, String mobilephone) throws Exception {\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, mobilephone);\r\n        if(Objects.isNull(studentService.getOne(wrapper)))\r\n        {\r\n            //为空，未找到学生\r\n            throw new Exception(\"学生不存在\");\r\n        }\r\n        StudentLog studentLog = new StudentLog();\r\n        studentLog.setContent(content);\r\n        studentLog.setStudentId(studentService.getStudentIdByMobilephone(mobilephone));\r\n        studentLog.setLogDate(LocalDateTime.now());\r\n        this.save(studentLog);\r\n    }\r\n\r\n    @Override\r\n    public void updateStudentLog(StudentLog studentLog) throws Exception {\r\n        LambdaQueryWrapper<StudentLog> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(StudentLog::getId, studentLog.getId());\r\n        if(Objects.isNull(this.getOne(wrapper)))\r\n        {\r\n            //为空，未找到该日志\r\n            throw new Exception(\"该学生日志不存在\");\r\n        }\r\n        this.updateById(studentLog);\r\n    }\r\n\r\n    @Override\r\n    public void deleteStudentLog(StudentLog studentLog) {\r\n        this.removeById(studentLog);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/StudentLogServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/StudentLogServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/StudentLogServiceImpl.java	(revision b93c3e48c71d083fd1fc9cdfd9143cd2ad96dbfe)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/StudentLogServiceImpl.java	(date 1689296792476)
@@ -1,6 +1,9 @@
 package com.fan.server.service.impl;
 
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
+import com.baomidou.mybatisplus.core.metadata.IPage;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import com.fan.server.pojo.Project;
 import com.fan.server.pojo.Student;
 import com.fan.server.pojo.StudentLog;
 import com.fan.server.mapper.StudentLogMapper;
@@ -11,6 +14,8 @@
 import org.springframework.stereotype.Service;
 
 import java.time.LocalDateTime;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Objects;
 
 /**
@@ -42,7 +47,6 @@
         studentLog.setLogDate(LocalDateTime.now());
         this.save(studentLog);
     }
-
     @Override
     public void updateStudentLog(StudentLog studentLog) throws Exception {
         LambdaQueryWrapper<StudentLog> wrapper = new LambdaQueryWrapper<>();
@@ -60,6 +64,20 @@
         this.removeById(studentLog);
     }
 
+    @Override
+    public Map<String, Object> getStudentLogList(Long pageNo, Long pageSize, Integer id){
+        LambdaQueryWrapper<StudentLog> wrapper = new LambdaQueryWrapper<>();
+        wrapper.eq(id != null, StudentLog::getStudentId, id);
+        wrapper.orderByAsc(StudentLog::getLogDate);
+        IPage<StudentLog> page = new Page<>(pageNo, pageSize);
+        this.page(page, wrapper);
 
+        //封装 map
+        HashMap<String, Object> data = new HashMap<>();
+        data.put("total", page.getTotal());
+        data.put("studentLogList", page.getRecords());
+
+        return data;
+    }
 
 }
Index: meeting-server/src/main/java/com/fan/server/controller/StudentLogController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.controller;\r\n\r\n\r\nimport com.fan.server.common.Result;\r\nimport com.fan.server.pojo.StudentLog;\r\nimport com.fan.server.service.IStudentLogService;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n/**\r\n * <p>\r\n *  前端控制器\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@RestController\r\n@RequestMapping(\"/student-log\")\r\npublic class StudentLogController {\r\n\r\n    @Autowired\r\n    IStudentLogService studentLogService;\r\n\r\n    @PostMapping(\"/addStudentLog\")\r\n    @ApiOperation(\"添加学生日志接口\")\r\n    public Result<?> addStudentLog(@RequestParam String content,\r\n                                   @RequestParam String mobilephone){\r\n        try{\r\n            studentLogService.addStudentLog(content, mobilephone);\r\n            return Result.success(\"添加学生日志成功\");\r\n        }catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/updateStudentLog\")\r\n    @ApiOperation(\"更新学生日志接口\")\r\n    public Result<?> updateStudentLog(@RequestBody StudentLog studentLog) {\r\n        try{\r\n            studentLogService.updateStudentLog(studentLog);\r\n            return Result.success(\"添加学生日志成功\");\r\n        }catch (Exception e) {\r\n            return Result.fail(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @DeleteMapping(\"/deleteStudentLog\")\r\n    @ApiOperation(\"删除学生日志接口\")\r\n    public Result<?> deleteStudentLog(@RequestBody StudentLog studentLog) {\r\n        try{\r\n            studentLogService.deleteStudentLog(studentLog);\r\n            return Result.success(\"删除学生日志成功\");\r\n        }catch (Exception e) {\r\n            return Result.fail(\"删除失败\");\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/controller/StudentLogController.java b/meeting-server/src/main/java/com/fan/server/controller/StudentLogController.java
--- a/meeting-server/src/main/java/com/fan/server/controller/StudentLogController.java	(revision b93c3e48c71d083fd1fc9cdfd9143cd2ad96dbfe)
+++ b/meeting-server/src/main/java/com/fan/server/controller/StudentLogController.java	(date 1689296914645)
@@ -8,6 +8,8 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.*;
 
+import java.util.Map;
+
 /**
  * <p>
  *  前端控制器
@@ -57,4 +59,20 @@
         }
     }
 
+    @GetMapping("/getStudentLogList")
+    @ApiOperation("查询学生日志列表接口")
+    public Result<Map<String, Object>> getStudentLogList(
+            @RequestParam("pageNo") Long pageNo,
+            @RequestParam("pageSize") Long pageSize,
+            @RequestParam(required = false, value = "studentId") Integer studentId
+            ){
+        try {
+            Map<String, Object> data = studentLogService.getStudentLogList(pageNo, pageSize, studentId);
+            return Result.success(data, "获取学生日日志列表成功");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return Result.fail(202);
+    }
+
 }
Index: meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fan.server.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.fan.server.pojo.Student;\r\nimport com.fan.server.mapper.StudentMapper;\r\nimport com.fan.server.pojo.User;\r\nimport com.fan.server.service.IStudentService;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport com.fan.server.utils.JwtUtil;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.Objects;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * <p>\r\n *  服务实现类\r\n * </p>\r\n *\r\n * @author BestOfTheWorld\r\n * @since 2023-07-05\r\n */\r\n@Service\r\npublic class StudentServiceImpl extends ServiceImpl<StudentMapper, Student> implements IStudentService {\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    @Autowired\r\n    private JwtUtil jwtUtil;\r\n\r\n    @Override\r\n    public void register(User user) throws Exception {\r\n        // 判断 student 表是否存在 mobilePhone\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, user.getUsername());\r\n        Student student = this.getOne(wrapper);\r\n        if (!Objects.isNull(student)) {\r\n            // 非空\r\n            throw new Exception(\"手机号存在，注册失败，请重新注册\");\r\n        }\r\n        // 空直接添加\r\n        Student res = new Student();\r\n        res.setMobilephone(user.getUsername());\r\n        res.setPassword(passwordEncoder.encode(user.getPassword()));\r\n        this.save(res);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> login(User user) {\r\n        // 查询学生是否存在\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, user.getUsername());\r\n        // 根据登录用户传入的用户名，查询数据库里的用户\r\n        Student dbUser = this.getOne(wrapper);\r\n        // 判断是否非空\r\n        if (!Objects.isNull(dbUser) && passwordEncoder.matches(user.getPassword(), dbUser.getPassword())) {\r\n            // 设置 Jwt 中的密码为明文密码，因为要在个人信息中修改，必须要存密码\r\n            dbUser.setPassword(user.getPassword());\r\n            // 生成 Jwt\r\n            String token;\r\n            try {\r\n                token = jwtUtil.createToken(dbUser, \"1\");\r\n                // 返回数据\r\n                HashMap<String, Object> data = new HashMap<>();\r\n                data.put(\"token\", token);\r\n                return data;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getInfo(String token) {\r\n        Student student = jwtUtil.parseToken(token, Student.class);\r\n        if (!Objects.isNull(student)) {\r\n            HashMap<String, Object> data = new HashMap<>();\r\n            // 根据 studentId 查询学生表\r\n            LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n            wrapper.eq(Student::getMobilephone, student.getMobilephone());\r\n            // 从数据库里查询学生，不从 token 里直接拿，因为在登录之后\r\n            // 学生信息有可能被修改\r\n            Student modifyStudent = this.getOne(wrapper);\r\n            data.put(\"studentId\", modifyStudent.getStudentId());\r\n            data.put(\"studentName\", modifyStudent.getStudentName());\r\n            data.put(\"mobilephone\", modifyStudent.getMobilephone());\r\n            data.put(\"password\", student.getPassword());\r\n            data.put(\"gender\", modifyStudent.getGender());\r\n            if (modifyStudent.getBirthday() != null) {\r\n                data.put(\"birthday\", modifyStudent.getBirthday().toString());\r\n            } else {\r\n                data.put(\"birthday\", null);\r\n            }\r\n            data.put(\"college\", modifyStudent.getCollege());\r\n            data.put(\"major\", modifyStudent.getMajor());\r\n            data.put(\"majorClass\", modifyStudent.getMajorClass());\r\n            data.put(\"avatar\", modifyStudent.getAvatar());\r\n\r\n            return data;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Boolean updateInformation(Student student) throws Exception{\r\n        // 根据 studentId 查询用户\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, student.getMobilephone());\r\n        Student dbStudent = this.getOne(wrapper);\r\n        if(Objects.isNull(dbStudent))\r\n            throw new Exception(\"用户不存在\");\r\n        // 判断密码是否修改   true：密码匹配，未修改，    false：密码不匹配，修改了密码\r\n        boolean isMatchPassword = passwordEncoder.matches(student.getPassword(), dbStudent.getPassword());\r\n        // 修改用户时，要把密码加密存到数据库\r\n        student.setPassword(passwordEncoder.encode(student.getPassword()));\r\n        // 要把生日 + 1 天，才能正确对应\r\n        LocalDate birthday = student.getBirthday();\r\n        LocalDate correctBirthday = birthday.plusDays(1);\r\n        student.setBirthday(correctBirthday);\r\n        // 修改\r\n        this.update(student, wrapper);\r\n        // 返回\r\n        return isMatchPassword;\r\n    }\r\n\r\n    @Override\r\n    public Integer getStudentIdByMobilephone(String mobilephone) throws Exception{\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, mobilephone);\r\n        Student student = this.getOne(wrapper);\r\n        if(Objects.isNull(student))\r\n                throw new Exception(\"用户不存在\");\r\n        return student.getId();\r\n    }\r\n\r\n    @Override\r\n    public String getStudentMobilephoneById(Integer id) throws Exception{\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getId, id);\r\n        Student student = this.getOne(wrapper);\r\n        if(Objects.isNull(student))\r\n            throw new Exception(\"用户不存在\");\r\n        return student.getMobilephone();\r\n    }\r\n\r\n    @Override\r\n    public Map<String, String> getStudentNameByMobilephone(String mobilephone) throws Exception {\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, mobilephone);\r\n        Student student = this.getOne(wrapper);\r\n        if(Objects.isNull(student)) {\r\n            //为空\r\n            throw new Exception(\"未找到该学生\");\r\n        }\r\n        Map<String, String> data = new HashMap<>();\r\n        data.put(\"Mobilephone\", student.getMobilephone());\r\n        return data;\r\n    }\r\n\r\n    @Override\r\n    public String getStudentNameByPhone(String mobilephone) throws Exception {\r\n        LambdaQueryWrapper<Student> wrapper = new LambdaQueryWrapper<>();\r\n        wrapper.eq(Student::getMobilephone, mobilephone);\r\n        Student student = this.getOne(wrapper);\r\n        if(Objects.isNull(student)) {\r\n            //为空\r\n            throw new Exception(\"未找到该学生\");\r\n        }\r\n        return student.getStudentName();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java b/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java
--- a/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java	(revision b93c3e48c71d083fd1fc9cdfd9143cd2ad96dbfe)
+++ b/meeting-server/src/main/java/com/fan/server/service/impl/StudentServiceImpl.java	(date 1689239580247)
@@ -161,7 +161,7 @@
             throw new Exception("未找到该学生");
         }
         Map<String, String> data = new HashMap<>();
-        data.put("Mobilephone", student.getMobilephone());
+        data.put("studentName", student.getStudentName());
         return data;
     }
 
